<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->


<root>
    <backup_1>
        package phraser;

        import edu.columbia.ccls.madamira.configuration.MorphFeatureSet;
        import edu.columbia.ccls.madamira.configuration.OutSeg;
        import java.util.ArrayList;
        import java.util.Iterator;
        import java.util.List;
        import static utils.Miss.pl;

        public class Sentence extends ArrayList<Word> {

            public int count;
            private String id;
            //    Boolean hasFullStop;
            OutSeg outseg;
            int seek;

            public Sentence(OutSeg outs) {
            outseg = outs;
            wording();
            }

            public int count() {
            return count;
            }

            public String id() {
            return id;
            }

            //    public Boolean finish() {
            //        
            //    }
            public void replace(int i, Word w) {
            this.remove(i);
            this.add(i, w);

            }

            public Sentence newInstance() {
            return this;
            }

    
            private void wording() {
            //        sentence = new Sentence();
            Word word = null;
            List<edu.columbia.ccls.madamira.configuration.Word> morphs = outseg.getWordInfo().getWord();
                int index = 0;
                String[] split;

                MorphFeatureSet wf = null;
                Iterator<edu.columbia.ccls.madamira.configuration.Word> itr = morphs.iterator();
                    Iterator itr2;
                    while (itr.hasNext()) {
                    edu.columbia.ccls.madamira.configuration.Word w = itr.next();
                    word = new Word();
                    word.value = w.getWord();
                    //            try {
                    itr2 = w.getAnalysis().iterator();
                    if (itr2.hasNext()) {
                    wf = w.getAnalysis().get(0).getMorphFeatureSet();
                    word.diac = wf.getDiac();
                    word.gloss = wf.getGloss();
                    word.tag = wf.getPos();
                    word.enc0 = wf.getEnc0();
                    word.prc0 = wf.getPrc0();
                    word.prc1 = wf.getPrc1();
                    word.prc2 = wf.getPrc2();
                    word.prc3 = wf.getPrc3();
                    word.stem = wf.getStem();
                    word.per = wf.getPer();
                    word.num = wf.getNum();
                    if (word.hasClitic()) {
                    word.clitic = word.clitic();
                    word.morphs = new ArrayList();
                    split = word.clitic.split("_");
                    Morpheme morph;
                    String temp;
                    int i = 0;
                    for (i = 0; i < split.length - 1; i++) {

                    morph = new Morpheme();
                    temp = split[i];
                    morph.value = temp;
                    morph.tag = temp.equals("و") || temp.equals("ف") ? "conj" : temp.equals("س") ? "fut" : "prep";
                    morph.diac = word.diac().substring(i * 2, 2 + i * 2);
                    morph.index = i;
                    word.morphs.add(morph);
                    }
                    split = word.clitic.split("/");
                    if (split.length > 1) {
                    morph = new Morpheme();
                    temp = split[1];
                    morph.value = temp;
                    morph.tag = word.enc0;
                    morph.per = word.per;
                    morph.num = word.num;
                    morph.index = ++i;
                    word.morphs.add(morph);
                    }
                    }
                    word.index = index++;
                    //            } catch (Exception e) {
                    //            }
                    }
                    if (word.hasPos()) {
                    this.add(word);
                    }
                    }
                    count = index;
                    id = outseg.getId();
                    //        if (wf != null && wf.getPos().equals("punc")) {
                    //            hasFullStop = true;
                    //        } else {
                    //            hasFullStop = false;
                    //        }

                    }

                    }

    </backup_1>
</root>
